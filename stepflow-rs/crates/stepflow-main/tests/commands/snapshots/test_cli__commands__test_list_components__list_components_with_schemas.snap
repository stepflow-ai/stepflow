---
source: crates/stepflow-main/tests/commands/test_list_components.rs
info:
  program: stepflow
  args:
    - "--log-file=/dev/null"
    - "--omit-stack-trace"
    - "--log-level=error"
    - list-components
    - "--config=tests/stepflow-config.yml"
    - "--schemas=true"
---
success: true
exit_code: 0
----- stdout -----
Available Components:
====================

Component: /create_messages (plugin: builtin)
  Description: Create a chat message list from system instructions and user prompt
  Available Routes:
    /builtin/create_messages
  Input Schema:
    {
      "type": "object",
      "properties": {
        "system_instructions": {
          "description": "The system instructions to include in the message list.",
          "type": [
            "string",
            "null"
          ]
        },
        "user_prompt": {
          "description": "The user prompt to include in the message list.",
          "type": "string"
        }
      },
      "required": [
        "user_prompt"
      ]
    }
  Output Schema:
    {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ChatMessage"
          }
        }
      },
      "required": [
        "messages"
      ]
    }

Component: /eval (plugin: builtin)
  Description: Execute a nested workflow with given input and return the result
  Available Routes:
    /builtin/eval
  Input Schema:
    {
      "description": "Input for the eval component",
      "type": "object",
      "properties": {
        "flow_id": {
          "description": "The ID of the workflow to execute (blob ID)",
          "$ref": "#/$defs/BlobId"
        },
        "input": {
          "description": "The input to pass to the workflow",
          "$ref": "#/$defs/Value"
        }
      },
      "required": [
        "flow_id",
        "input"
      ]
    }
  Output Schema:
    {
      "description": "Output from the eval component\n\nThe output is simply the result of the nested workflow execution",
      "type": "object",
      "properties": {
        "result": {
          "description": "The result from executing the nested workflow",
          "$ref": "#/$defs/FlowResult"
        },
        "run_id": {
          "description": "The run ID of the nested workflow",
          "type": "string"
        }
      },
      "required": [
        "result",
        "run_id"
      ]
    }

Component: /get_blob (plugin: builtin)
  Description: Retrieve JSON data from a blob using its ID
  Available Routes:
    /builtin/get_blob
  Input Schema:
    {
      "description": "Input for the get_blob component",
      "type": "object",
      "properties": {
        "blob_id": {
          "description": "The blob ID to retrieve",
          "type": "string"
        }
      },
      "required": [
        "blob_id"
      ]
    }
  Output Schema:
    {
      "description": "Output from the get_blob component",
      "type": "object",
      "properties": {
        "data": {
          "description": "The JSON data stored in the blob"
        }
      },
      "required": [
        "data"
      ]
    }

Component: /iterate (plugin: builtin)
  Description: Iteratively apply a workflow until it returns a result instead of next
  Available Routes:
    /builtin/iterate
  Input Schema:
    {
      "description": "Input for the iterate component",
      "type": "object",
      "properties": {
        "flow": {
          "description": "The workflow to iterate. Must return either {\"result\": value} or {\"next\": value}",
          "$ref": "#/$defs/Flow"
        },
        "initial_input": {
          "description": "The initial input to pass to the workflow",
          "$ref": "#/$defs/Value"
        },
        "max_iterations": {
          "description": "Maximum number of iterations to prevent infinite loops (default: 1000)",
          "type": "integer",
          "format": "uint32",
          "minimum": 0,
          "default": 1000
        }
      },
      "required": [
        "flow",
        "initial_input"
      ]
    }
  Output Schema:
    {
      "description": "Output from the iterate component",
      "type": "object",
      "properties": {
        "result": {
          "description": "The final result value",
          "$ref": "#/$defs/Value"
        },
        "iterations": {
          "description": "The number of iterations performed",
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "terminated": {
          "description": "Whether the iteration was terminated by max_iterations",
          "type": "boolean"
        }
      },
      "required": [
        "result",
        "iterations",
        "terminated"
      ]
    }

Component: /load_file (plugin: builtin)
  Description: Load and parse a file (JSON, YAML, or text) from the filesystem
  Available Routes:
    /builtin/load_file
  Input Schema:
    {
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to the file to load",
          "type": "string"
        },
        "format": {
          "description": "Format of the file (json, yaml, text). If not specified, inferred from extension",
          "anyOf": [
            {
              "$ref": "#/$defs/FileFormat"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "path"
      ]
    }
  Output Schema:
    {
      "type": "object",
      "properties": {
        "data": {
          "description": "The loaded data (parsed JSON/YAML or raw text)"
        },
        "metadata": {
          "description": "Metadata about the loaded file",
          "$ref": "#/$defs/FileMetadata"
        }
      },
      "required": [
        "data",
        "metadata"
      ]
    }

Component: /map (plugin: builtin)
  Description: Apply a workflow to each item in a list and collect the results
  Available Routes:
    /builtin/map
  Input Schema:
    {
      "description": "Input for the map component",
      "type": "object",
      "properties": {
        "workflow": {
          "description": "The workflow to apply to each item",
          "$ref": "#/$defs/Flow"
        },
        "items": {
          "description": "The list of items to process",
          "type": "array",
          "items": {
            "$ref": "#/$defs/Value"
          }
        },
        "max_concurrency": {
          "description": "Maximum number of concurrent executions (optional, defaults to number of items)",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        }
      },
      "required": [
        "workflow",
        "items"
      ]
    }
  Output Schema:
    {
      "description": "Output from the map component",
      "type": "object",
      "properties": {
        "results": {
          "description": "The results from processing each item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FlowResult"
          }
        },
        "successful": {
          "description": "Summary statistics",
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "failed": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "skipped": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        }
      },
      "required": [
        "results",
        "successful",
        "failed",
        "skipped"
      ]
    }

Component: /openai (plugin: builtin)
  Description: Send messages to OpenAI's chat completion API and get a response
  Available Routes:
    /builtin/openai
  Input Schema:
    {
      "description": "Input for the OpenAI component",
      "type": "object",
      "properties": {
        "messages": {
          "description": "The messages to send to the API",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ChatMessage"
          }
        },
        "max_tokens": {
          "description": "Max tokens to generate (optional)",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0,
          "maximum": 65535
        },
        "temperature": {
          "description": "Temperature setting (optional)",
          "type": [
            "number",
            "null"
          ],
          "format": "float"
        },
        "api_key": {
          "description": "API key override (optional - uses environment variable if not provided)",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "messages"
      ]
    }
  Output Schema:
    {
      "description": "Output from the OpenAI component",
      "type": "object",
      "properties": {
        "response": {
          "description": "The generated response text",
          "type": "string"
        }
      },
      "required": [
        "response"
      ]
    }

Component: /put_blob (plugin: builtin)
  Description: Store JSON data as a blob and return its content-addressable ID
  Available Routes:
    /builtin/put_blob
  Input Schema:
    {
      "description": "Input for the put_blob component",
      "type": "object",
      "properties": {
        "data": {
          "description": "The JSON data to store as a blob"
        },
        "blob_type": {
          "description": "The type of blob to store",
          "$ref": "#/$defs/BlobType"
        }
      },
      "required": [
        "data",
        "blob_type"
      ]
    }
  Output Schema:
    {
      "description": "Output from the put_blob component",
      "type": "object",
      "properties": {
        "blob_id": {
          "description": "The blob ID for the stored data",
          "type": "string"
        }
      },
      "required": [
        "blob_id"
      ]
    }

Total components: 8

----- stderr -----
