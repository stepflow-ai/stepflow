# Prometheus configuration for Stepflow observability

global:
  scrape_interval: 15s      # How frequently to scrape targets
  evaluation_interval: 15s  # How frequently to evaluate rules
  external_labels:
    cluster: 'stepflow-local'
    environment: 'development'

# Alertmanager configuration (optional - can be added later)
# alerting:
#   alertmanagers:
#     - static_configs:
#         - targets: ['alertmanager:9093']

# Load rules files (for recording rules and alerts)
# rule_files:
#   - "rules/*.yml"

scrape_configs:
  # Scrape Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
        labels:
          component: 'prometheus'

  # Scrape OpenTelemetry Collector's own metrics
  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8888']
        labels:
          component: 'otel-collector'

  # Scrape metrics from OpenTelemetry Collector's Prometheus exporter
  # This is where Stepflow application metrics will appear
  - job_name: 'stepflow-via-otel'
    static_configs:
      - targets: ['otel-collector:8889']
        labels:
          source: 'otlp'

  # Future: Direct Stepflow server metrics endpoint (if exposing /metrics)
  # - job_name: 'stepflow-server'
  #   static_configs:
  #     - targets: ['host.docker.internal:8080']
  #       labels:
  #         component: 'stepflow-server'

  # Jaeger metrics
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger:14269']
        labels:
          component: 'jaeger'

  # Loki metrics
  - job_name: 'loki'
    static_configs:
      - targets: ['loki:3100']
        labels:
          component: 'loki'

  # Grafana metrics
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
        labels:
          component: 'grafana'
