name: Release - Rust

on:
  repository_dispatch:
    types: [build-release]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      skip_tag_creation:
        description: 'Skip creating git tag (for testing)'
        required: false
        type: boolean
        default: false

# Limit concurrency to a single run per branch (ref).
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ${{ github.repository }}

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      skip_tag: ${{ steps.version.outputs.skip_tag }}

    steps:
      - name: Set version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT
            echo "skip_tag=false" >> $GITHUB_OUTPUT
            echo "Source: repository dispatch"
            echo "Version: ${{ github.event.client_payload.version }}"
            echo "Tag: ${{ github.event.client_payload.tag }}"
          else
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=stepflow-rs-${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "skip_tag=${{ inputs.skip_tag_creation }}" >> $GITHUB_OUTPUT
            echo "Source: manual workflow dispatch"
            echo "Version: ${{ inputs.version }}"
            echo "Tag: stepflow-rs-${{ inputs.version }}"
            echo "Skip tag: ${{ inputs.skip_tag_creation }}"
          fi

  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets (glibc)
          - { os: ubuntu-22.04, target: x86_64-unknown-linux-gnu, cross: false }
          - { os: ubuntu-22.04, target: aarch64-unknown-linux-gnu, cross: true }

          # Linux targets (musl - for Alpine)
          - { os: ubuntu-22.04, target: x86_64-unknown-linux-musl, cross: true }
          - { os: ubuntu-22.04, target: aarch64-unknown-linux-musl, cross: true }

          # macOS targets
          - { os: macos-14, target: x86_64-apple-darwin, cross: false }
          - { os: macos-14, target: aarch64-apple-darwin, cross: false }

          # Windows targets
          - { os: windows-2022, target: x86_64-pc-windows-msvc, cross: false }

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            stepflow-rs/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('stepflow-rs/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-release-
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build binaries (native)
        if: ${{ !matrix.cross }}
        working-directory: stepflow-rs
        run: |
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            # Windows: Only build stepflow and stepflow-server (load-balancer is Unix-only)
            cargo build --release --target ${{ matrix.target }} --bin stepflow --bin stepflow-server
          else
            # Unix: Build all three binaries
            cargo build --release --target ${{ matrix.target }} --bin stepflow --bin stepflow-server --bin stepflow-load-balancer
          fi
        shell: bash

      - name: Build binaries (cross)
        if: matrix.cross
        working-directory: stepflow-rs
        run: |
          # Cross builds are Unix-only, so always build all three binaries
          cross build --release --target ${{ matrix.target }} --bin stepflow --bin stepflow-server --bin stepflow-load-balancer

      - name: Package binaries (Unix)
        if: matrix.os != 'windows-2022'
        working-directory: stepflow-rs
        run: |
          mkdir -p artifacts

          # Copy all three binaries
          cp target/${{ matrix.target }}/release/stepflow artifacts/stepflow-${{ matrix.target }}
          cp target/${{ matrix.target }}/release/stepflow-server artifacts/stepflow-server-${{ matrix.target }}
          cp target/${{ matrix.target }}/release/stepflow-load-balancer artifacts/stepflow-load-balancer-${{ matrix.target }}

          # Make executable
          chmod +x artifacts/stepflow-${{ matrix.target }}
          chmod +x artifacts/stepflow-server-${{ matrix.target }}
          chmod +x artifacts/stepflow-load-balancer-${{ matrix.target }}

      - name: Package binaries (Windows)
        if: matrix.os == 'windows-2022'
        working-directory: stepflow-rs
        run: |
          mkdir artifacts

          copy target\${{ matrix.target }}\release\stepflow.exe artifacts\stepflow-${{ matrix.target }}.exe
          copy target\${{ matrix.target }}\release\stepflow-server.exe artifacts\stepflow-server-${{ matrix.target }}.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-stepflow-${{ matrix.target }}
          path: stepflow-rs/artifacts/*-${{ matrix.target }}*
          retention-days: 7

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-22.04
    needs: [build-binaries, determine-version]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: artifact-stepflow-*
          merge-multiple: true

      - name: Prepare binaries for Docker build
        run: |
          # Copy binaries to release/binaries directory with expected naming
          mkdir -p stepflow-rs/release/binaries
          cp ./artifacts/* stepflow-rs/release/binaries/
          ls -lh stepflow-rs/release/binaries/

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          cd stepflow-rs/release
          PUSH=true ./build-docker-images.sh \
            ${{ needs.determine-version.outputs.version }} \
            ${{ env.REGISTRY }}/${{ github.repository }}

  create-tag-and-release:
    name: Create Tag and Release
    runs-on: ubuntu-22.04
    needs: [determine-version, build-binaries, build-docker]
    if: needs.determine-version.outputs.skip_tag == 'false'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts
          pattern: artifact-stepflow-*
          merge-multiple: true

      - name: Create release archives
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          mkdir -p ./archives
          cd ./release-artifacts

          # Create tar.gz archives for Unix targets (include all three binaries)
          for target in x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-unknown-linux-musl aarch64-unknown-linux-musl x86_64-apple-darwin aarch64-apple-darwin; do
            # Create versioned directory name
            dir_name="stepflow-${VERSION}-${target}"
            mkdir -p "../${dir_name}"
            has_binaries=false

            for binary_name in stepflow stepflow-server stepflow-load-balancer; do
              binary="${binary_name}-${target}"
              if [ -f "$binary" ]; then
                cp "$binary" "../${dir_name}/${binary_name}"
                chmod +x "../${dir_name}/${binary_name}"
                has_binaries=true
                echo "Added ${binary_name} for ${target}"
              fi
            done

            if [ "$has_binaries" = true ]; then
              cd ..
              tar -czf "archives/stepflow-${VERSION}-${target}.tar.gz" "${dir_name}"
              cd release-artifacts
              echo "Created archive for ${target}: stepflow-${VERSION}-${target}.tar.gz"
              rm -rf "../${dir_name}"
            fi
          done

          # Create zip archive for Windows target (only stepflow and stepflow-server)
          target="x86_64-pc-windows-msvc"
          dir_name="stepflow-${VERSION}-${target}"
          mkdir -p "../${dir_name}"
          has_binaries=false

          for binary_name in stepflow stepflow-server; do
            binary="${binary_name}-${target}.exe"
            if [ -f "$binary" ]; then
              cp "$binary" "../${dir_name}/${binary_name}.exe"
              has_binaries=true
              echo "Added ${binary_name}.exe for ${target}"
            fi
          done

          if [ "$has_binaries" = true ]; then
            cd ..
            zip -r "archives/stepflow-${VERSION}-${target}.zip" "${dir_name}"
            cd release-artifacts
            echo "Created archive for Windows: stepflow-${VERSION}-${target}.zip"
            rm -rf "../${dir_name}"
          fi

      - name: Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          ## Stepflow Rust Binary Release v${{ needs.determine-version.outputs.version }}

          📋 **[View Release Changelog](https://github.com/${{ github.repository }}/blob/main/stepflow-rs/CHANGELOG.md#${{ needs.determine-version.outputs.version }})** | **[Full Changelog](https://github.com/${{ github.repository }}/blob/main/stepflow-rs/CHANGELOG.md)**

          This release includes pre-built binaries for multiple platforms.

          **Unix platforms** (Linux, macOS) include three binaries:
          - `stepflow` - CLI tool for running workflows
          - `stepflow-server` - HTTP server for workflow execution
          - `stepflow-load-balancer` - Load balancer for distributed component servers

          **Windows** includes two binaries (load-balancer is Unix-only):
          - `stepflow.exe` - CLI tool for running workflows
          - `stepflow-server.exe` - HTTP server for workflow execution

          ### 📥 Download Binaries

          **Linux (glibc)**
          - [stepflow-${{ needs.determine-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-${{ needs.determine-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz)
          - [stepflow-${{ needs.determine-version.outputs.version }}-aarch64-unknown-linux-gnu.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-${{ needs.determine-version.outputs.version }}-aarch64-unknown-linux-gnu.tar.gz)

          **Linux (musl/Alpine)**
          - [stepflow-${{ needs.determine-version.outputs.version }}-x86_64-unknown-linux-musl.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-${{ needs.determine-version.outputs.version }}-x86_64-unknown-linux-musl.tar.gz)
          - [stepflow-${{ needs.determine-version.outputs.version }}-aarch64-unknown-linux-musl.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-${{ needs.determine-version.outputs.version }}-aarch64-unknown-linux-musl.tar.gz)

          **macOS**
          - [stepflow-${{ needs.determine-version.outputs.version }}-x86_64-apple-darwin.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-${{ needs.determine-version.outputs.version }}-x86_64-apple-darwin.tar.gz)
          - [stepflow-${{ needs.determine-version.outputs.version }}-aarch64-apple-darwin.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-${{ needs.determine-version.outputs.version }}-aarch64-apple-darwin.tar.gz)

          **Windows**
          - [stepflow-${{ needs.determine-version.outputs.version }}-x86_64-pc-windows-msvc.zip](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-${{ needs.determine-version.outputs.version }}-x86_64-pc-windows-msvc.zip)

          ### 🐳 Docker Images
          Docker images are available for three different components:

          **Stepflow Server** (HTTP workflow execution server):
          - `ghcr.io/${{ github.repository }}/stepflow-server:debian-${{ needs.determine-version.outputs.version }}`
          - `ghcr.io/${{ github.repository }}/stepflow-server:alpine-${{ needs.determine-version.outputs.version }}`
          - Default port: 7840
          - Entry point: `stepflow-server --port 7840`

          **Stepflow Load Balancer** (Component server load balancer):
          - `ghcr.io/${{ github.repository }}/stepflow-load-balancer:debian-${{ needs.determine-version.outputs.version }}`
          - `ghcr.io/${{ github.repository }}/stepflow-load-balancer:alpine-${{ needs.determine-version.outputs.version }}`
          - Default port: 8080
          - Configure via `UPSTREAM_SERVICE` environment variable

          **Stepflow CLI** (Command-line workflow execution):
          - `ghcr.io/${{ github.repository }}/stepflow:debian-${{ needs.determine-version.outputs.version }}`
          - `ghcr.io/${{ github.repository }}/stepflow:alpine-${{ needs.determine-version.outputs.version }}`

          ### 📦 Installation

          **Linux:**
          ```bash
          # Download and extract (creates a versioned directory)
          tar -xzf stepflow-${{ needs.determine-version.outputs.version }}-*.tar.gz
          cd stepflow-${{ needs.determine-version.outputs.version }}-*

          # Move to PATH (optional)
          sudo mv stepflow stepflow-server stepflow-load-balancer /usr/local/bin/
          ```

          **macOS:**
          ```bash
          # Download and extract (creates a versioned directory)
          tar -xzf stepflow-${{ needs.determine-version.outputs.version }}-*.tar.gz
          cd stepflow-${{ needs.determine-version.outputs.version }}-*

          # Remove quarantine attribute (required for unsigned binaries)
          xattr -d com.apple.quarantine stepflow stepflow-server stepflow-load-balancer

          # Move to PATH (optional)
          sudo mv stepflow stepflow-server stepflow-load-balancer /usr/local/bin/
          ```

          **Windows:**
          ```powershell
          # Extract the zip file (creates a versioned directory)
          Expand-Archive stepflow-${{ needs.determine-version.outputs.version }}-*.zip
          cd stepflow-${{ needs.determine-version.outputs.version }}-*

          # Add to PATH or run directly
          ```

          > **Note for macOS users:** These binaries are not signed or notarized. You must remove the quarantine attribute using `xattr -d com.apple.quarantine` before execution, or macOS Gatekeeper will block them.
          EOF

      - name: Create GitHub release with tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ needs.determine-version.outputs.tag }}" \
            --title "Stepflow Rust v${{ needs.determine-version.outputs.version }}" \
            --notes-file release-notes.md \
            stepflow-rs/CHANGELOG.md \
            ./archives/stepflow-*.tar.gz \
            ./archives/stepflow-*.zip

  summary:
    name: Build Summary
    runs-on: ubuntu-22.04
    needs: [determine-version, build-binaries, build-docker, create-tag-and-release]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "## Build Summary ${{ needs.determine-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-binaries.result }}" = "success" ]; then
            echo "| Binary builds |  Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Binary builds | L Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-docker.result }}" = "success" ]; then
            echo "| Docker builds & manifests |  Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker builds & manifests | L Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.determine-version.outputs.skip_tag }}" = "false" ]; then
            if [ "${{ needs.create-tag-and-release.result }}" = "success" ]; then
              echo "| Release Creation |  Success |" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.create-tag-and-release.result }}" = "skipped" ]; then
              echo "| Release Creation |  Skipped |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Release Creation | L Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Release Creation |  Skipped (testing mode) |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platforms Built" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux**: x86_64 (glibc + musl), ARM64 (glibc + musl)" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS**: x86_64, ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows**: x86_64" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Images**: 3 components × 2 bases × 2 architectures" >> $GITHUB_STEP_SUMMARY
          echo "  - stepflow-server (Debian + Alpine, amd64 + arm64)" >> $GITHUB_STEP_SUMMARY
          echo "  - stepflow-load-balancer (Debian + Alpine, amd64 + arm64)" >> $GITHUB_STEP_SUMMARY
          echo "  - stepflow (Debian + Alpine, amd64 + arm64)" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.determine-version.outputs.skip_tag }}" = "false" ] && [ "${{ needs.create-tag-and-release.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎉 Release Complete" >> $GITHUB_STEP_SUMMARY
            echo "**Tag:** ${{ needs.determine-version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "**Release:** [Stepflow Rust v${{ needs.determine-version.outputs.version }}](https://github.com/${{ github.repository }}/releases/tag/${{ needs.determine-version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          fi