name: Release - Rust

on:
  repository_dispatch:
    types: [build-release]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      skip_tag_creation:
        description: 'Skip creating git tag (for testing)'
        required: false
        type: boolean
        default: false

# Limit concurrency to a single run per branch (ref).
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ${{ github.repository }}

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      skip_tag: ${{ steps.version.outputs.skip_tag }}

    steps:
      - name: Set version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT
            echo "skip_tag=false" >> $GITHUB_OUTPUT
            echo "Source: repository dispatch"
            echo "Version: ${{ github.event.client_payload.version }}"
            echo "Tag: ${{ github.event.client_payload.tag }}"
          else
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=stepflow-rs-${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "skip_tag=${{ inputs.skip_tag_creation }}" >> $GITHUB_OUTPUT
            echo "Source: manual workflow dispatch"
            echo "Version: ${{ inputs.version }}"
            echo "Tag: stepflow-rs-${{ inputs.version }}"
            echo "Skip tag: ${{ inputs.skip_tag_creation }}"
          fi

  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets (glibc)
          - { os: ubuntu-22.04, target: x86_64-unknown-linux-gnu, cross: false }
          - { os: ubuntu-22.04, target: aarch64-unknown-linux-gnu, cross: true }

          # Linux targets (musl - for Alpine)
          - { os: ubuntu-22.04, target: x86_64-unknown-linux-musl, cross: true }
          - { os: ubuntu-22.04, target: aarch64-unknown-linux-musl, cross: true }

          # macOS targets
          - { os: macos-14, target: x86_64-apple-darwin, cross: false }
          - { os: macos-14, target: aarch64-apple-darwin, cross: false }

          # Windows targets
          - { os: windows-2022, target: x86_64-pc-windows-msvc, cross: false }

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            stepflow-rs/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('stepflow-rs/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-release-
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build binaries (native)
        if: ${{ !matrix.cross }}
        working-directory: stepflow-rs
        run: |
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            # Windows: Only build stepflow and stepflow-server (load-balancer is Unix-only)
            cargo build --release --target ${{ matrix.target }} --bin stepflow --bin stepflow-server
          else
            # Unix: Build all three binaries
            cargo build --release --target ${{ matrix.target }} --bin stepflow --bin stepflow-server --bin stepflow-load-balancer
          fi
        shell: bash

      - name: Build binaries (cross)
        if: matrix.cross
        working-directory: stepflow-rs
        run: |
          # Cross builds are Unix-only, so always build all three binaries
          cross build --release --target ${{ matrix.target }} --bin stepflow --bin stepflow-server --bin stepflow-load-balancer

      - name: Package binaries (Unix)
        if: matrix.os != 'windows-2022'
        working-directory: stepflow-rs
        run: |
          mkdir -p artifacts

          # Copy all three binaries
          cp target/${{ matrix.target }}/release/stepflow artifacts/stepflow-${{ matrix.target }}
          cp target/${{ matrix.target }}/release/stepflow-server artifacts/stepflow-server-${{ matrix.target }}
          cp target/${{ matrix.target }}/release/stepflow-load-balancer artifacts/stepflow-load-balancer-${{ matrix.target }}

          # Make executable
          chmod +x artifacts/stepflow-${{ matrix.target }}
          chmod +x artifacts/stepflow-server-${{ matrix.target }}
          chmod +x artifacts/stepflow-load-balancer-${{ matrix.target }}

      - name: Package binaries (Windows)
        if: matrix.os == 'windows-2022'
        working-directory: stepflow-rs
        run: |
          mkdir artifacts

          copy target\${{ matrix.target }}\release\stepflow.exe artifacts\stepflow-${{ matrix.target }}.exe
          copy target\${{ matrix.target }}\release\stepflow-server.exe artifacts\stepflow-server-${{ matrix.target }}.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-stepflow-${{ matrix.target }}
          path: stepflow-rs/artifacts/stepflow-${{ matrix.target }}*
          retention-days: 7

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-22.04
    needs: build-binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - base: debian
            platform: linux/amd64
            tag-suffix: amd64
            timeout: 10
            binary-target: x86_64-unknown-linux-gnu
          - base: debian
            platform: linux/arm64
            tag-suffix: arm64
            timeout: 15
            binary-target: aarch64-unknown-linux-gnu
          - base: alpine
            platform: linux/amd64
            tag-suffix: amd64
            timeout: 10
            binary-target: x86_64-unknown-linux-musl
          - base: alpine
            platform: linux/arm64
            tag-suffix: arm64
            timeout: 15
            binary-target: aarch64-unknown-linux-musl

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download required binary
        uses: actions/download-artifact@v4
        with:
          name: artifact-stepflow-${{ matrix.binary-target }}
          path: ./binary/

      - name: Prepare binary
        run: |
          chmod +x ./binary/stepflow-*

      - name: Create Dockerfiles
        run: |
          pwd

          cat > Dockerfile.debian << 'EOF'
          # syntax=docker/dockerfile:1
          FROM debian:bookworm-slim
          RUN apt-get update && \
              apt-get install -y ca-certificates && \
              rm -rf /var/lib/apt/lists/* && \
              useradd -r -s /bin/false stepflow
          COPY binary/stepflow-* /usr/local/bin/stepflow
          RUN chmod +x /usr/local/bin/stepflow
          USER stepflow
          ENTRYPOINT ["/usr/local/bin/stepflow"]
          EOF

          cat > Dockerfile.alpine << 'EOF'
          # syntax=docker/dockerfile:1
          FROM alpine:3.19
          RUN apk --no-cache add ca-certificates && \
              adduser -D -s /bin/sh stepflow
          COPY binary/stepflow-* /usr/local/bin/stepflow
          RUN chmod +x /usr/local/bin/stepflow
          USER stepflow
          ENTRYPOINT ["/usr/local/bin/stepflow"]
          EOF
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: Dockerfile.${{ matrix.base }}
          # Don't use other tags since we're pushing by digest.
          tags: ${{ env.REGISTRY }}/${{ github.repository }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Test Docker image (${{ matrix.platform }})
        timeout-minutes: 1
        run: |
          image_ref="${{ env.REGISTRY }}/${{ github.repository }}@${{ steps.build.outputs.digest }}"
          echo "Testing image: $image_ref"
          docker run --platform ${{ matrix.platform }} --rm "$image_ref" --version || true
          docker run --platform ${{ matrix.platform }} --rm "$image_ref" --help

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.base }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-multiplatform:
    name: Create Multi-platform Images
    runs-on: ubuntu-22.04
    needs: [build-docker, determine-version]
    strategy:
      fail-fast: false
      matrix:
        base: [debian, alpine]

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ matrix.base }}-*
          merge-multiple: true
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Prepare Env
        run: |
          echo "REGISTRY_IMAGE=${{ env.REGISTRY }}/${{ github.repository }}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor:
            prefix=${{ matrix.base }}-
          tags: |
            type=semver,pattern={{version}},value=${{ needs.determine-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.determine-version.outputs.version }}
            type=sha

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  create-tag-and-release:
    name: Create Tag and Release
    runs-on: ubuntu-22.04
    needs: [determine-version, build-binaries, merge-multiplatform]
    if: needs.determine-version.outputs.skip_tag == 'false'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts
          pattern: artifact-stepflow-*
          merge-multiple: true

      - name: Create release archives
        run: |
          mkdir -p ./archives
          cd ./release-artifacts

          # Create tar.gz archives for Unix targets (include all three binaries)
          for target in x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-unknown-linux-musl aarch64-unknown-linux-musl x86_64-apple-darwin aarch64-apple-darwin; do
            binaries=""
            for binary_name in stepflow stepflow-server stepflow-load-balancer; do
              binary="${binary_name}-${target}"
              if [ -f "$binary" ]; then
                binaries="$binaries $binary"
              fi
            done

            if [ -n "$binaries" ]; then
              tar -czf "../archives/stepflow-${target}.tar.gz" $binaries
              echo "Created archive for ${target} with binaries:$binaries"
            fi
          done

          # Create zip archive for Windows target (only stepflow and stepflow-server)
          target="x86_64-pc-windows-msvc"
          binaries=""
          for binary_name in stepflow stepflow-server; do
            binary="${binary_name}-${target}.exe"
            if [ -f "$binary" ]; then
              binaries="$binaries $binary"
            fi
          done

          if [ -n "$binaries" ]; then
            zip "../archives/stepflow-${target}.zip" $binaries
            echo "Created archive for Windows with binaries:$binaries"
          fi

      - name: Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          ## Stepflow Rust Binary Release v${{ needs.determine-version.outputs.version }}

          📋 **[View Release Changelog](https://github.com/${{ github.repository }}/blob/main/stepflow-rs/CHANGELOG.md#${{ needs.determine-version.outputs.version }})** | **[Full Changelog](https://github.com/${{ github.repository }}/blob/main/stepflow-rs/CHANGELOG.md)**

          This release includes pre-built binaries for multiple platforms.

          **Unix platforms** (Linux, macOS) include three binaries:
          - `stepflow` - CLI tool for running workflows
          - `stepflow-server` - HTTP server for workflow execution
          - `stepflow-load-balancer` - Load balancer for distributed component servers

          **Windows** includes two binaries (load-balancer is Unix-only):
          - `stepflow.exe` - CLI tool for running workflows
          - `stepflow-server.exe` - HTTP server for workflow execution

          ### 📥 Download Binaries

          **Linux (glibc)**
          - [stepflow-x86_64-unknown-linux-gnu.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-x86_64-unknown-linux-gnu.tar.gz)
          - [stepflow-aarch64-unknown-linux-gnu.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-aarch64-unknown-linux-gnu.tar.gz)

          **Linux (musl/Alpine)**
          - [stepflow-x86_64-unknown-linux-musl.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-x86_64-unknown-linux-musl.tar.gz)
          - [stepflow-aarch64-unknown-linux-musl.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-aarch64-unknown-linux-musl.tar.gz)

          **macOS**
          - [stepflow-x86_64-apple-darwin.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-x86_64-apple-darwin.tar.gz)
          - [stepflow-aarch64-apple-darwin.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-aarch64-apple-darwin.tar.gz)

          **Windows**
          - [stepflow-x86_64-pc-windows-msvc.zip](https://github.com/${{ github.repository }}/releases/download/${{ needs.determine-version.outputs.tag }}/stepflow-x86_64-pc-windows-msvc.zip)

          ### 🐳 Docker Images
          Docker images are also available at `ghcr.io/${{ github.repository }}` (CLI only):
          - `ghcr.io/${{ github.repository }}:debian-${{ needs.determine-version.outputs.version }}`
          - `ghcr.io/${{ github.repository }}:alpine-${{ needs.determine-version.outputs.version }}`

          ### 📦 Installation
          1. Download the appropriate archive for your platform using the links above
          2. Extract the archive: `tar -xzf stepflow-*.tar.gz` (or unzip for Windows)
          3. Make binaries executable (Unix): `chmod +x stepflow-* stepflow-server-* stepflow-load-balancer-*`
          4. Move the binaries to a directory in your PATH or run directly
          EOF

      - name: Create GitHub release with tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ needs.determine-version.outputs.tag }}" \
            --title "Stepflow Rust v${{ needs.determine-version.outputs.version }}" \
            --notes-file release-notes.md \
            stepflow-rs/CHANGELOG.md \
            ./archives/stepflow-*.tar.gz \
            ./archives/stepflow-*.zip

  summary:
    name: Build Summary
    runs-on: ubuntu-22.04
    needs: [determine-version, build-binaries, build-docker, merge-multiplatform, create-tag-and-release]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "## Build Summary ${{ needs.determine-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-binaries.result }}" = "success" ]; then
            echo "| Binary builds |  Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Binary builds | L Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-docker.result }}" = "success" ]; then
            echo "| Docker builds |  Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker builds | L Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.merge-multiplatform.result }}" = "success" ]; then
            echo "| Multi-platform |  Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Multi-platform | L Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.determine-version.outputs.skip_tag }}" = "false" ]; then
            if [ "${{ needs.create-tag-and-release.result }}" = "success" ]; then
              echo "| Release Creation |  Success |" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.create-tag-and-release.result }}" = "skipped" ]; then
              echo "| Release Creation |  Skipped |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Release Creation | L Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Release Creation |  Skipped (testing mode) |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platforms Built" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux**: x86_64 (glibc + musl), ARM64 (glibc + musl)" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS**: x86_64, ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows**: x86_64" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker**: Debian + Alpine (multiplatform)" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.determine-version.outputs.skip_tag }}" = "false" ] && [ "${{ needs.create-tag-and-release.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎉 Release Complete" >> $GITHUB_STEP_SUMMARY
            echo "**Tag:** ${{ needs.determine-version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "**Release:** [Stepflow Rust v${{ needs.determine-version.outputs.version }}](https://github.com/${{ github.repository }}/releases/tag/${{ needs.determine-version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          fi