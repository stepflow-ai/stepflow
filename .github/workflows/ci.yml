name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Limit concurrency to a single run per branch (ref).
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

# =============================================================================
# CI OPTIMIZATION STRATEGY
# =============================================================================
# This workflow uses path-based filtering to run checks only on changed sub-packages.
# This significantly reduces CI time by avoiding unnecessary work.
#
# APPROACH:
# 1. Use dorny/paths-filter to detect which sub-packages have changes
# 2. Use composite actions (.github/actions/*) to encapsulate package-specific logic
# 3. Run checks conditionally based on detected changes
# 4. Use a final aggregation job to ensure all required checks pass
#
# SUB-PACKAGES:
# - rust: stepflow-rs Rust workspace (crates/*)
# - python: sdks/python Python SDK
# - docs: docs/ Docusaurus documentation site
#
# EXTENDING THIS PATTERN:
# To add new sub-packages (e.g., TypeScript SDK, UI):
# 1. Create a new composite action in .github/actions/
# 2. Add path filters below in the 'changes' job
# 3. Add a conditional job that uses the new composite action
# 4. Update the 'check-success' job dependencies
# =============================================================================

jobs:
  # Detect which parts of the codebase have changed
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      python: ${{ steps.filter.outputs.python }}
      docs: ${{ steps.filter.outputs.docs }}
      langflow: ${{ steps.filter.outputs.langflow }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - 'stepflow-rs/**'
              - 'schemas/**'
            python:
              - 'sdks/python/**'
              - 'schemas/**'
            docs:
              - 'docs/**'
              - 'README.md'
              - '*.md'
            langflow:
              - 'integrations/langflow/**'
              - 'stepflow-rs/**'
              - 'sdks/python/**'

  # Rust checks (combined style, build, and test)
  rust-checks:
    name: Rust Checks
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    strategy:
      fail-fast: true
      matrix:
        include:
          - { os: ubuntu-latest }
          # Additional OS can be added when needed:
          # - { os: macos-latest }
          # - { os: windows-latest }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-checks

  # Python SDK checks
  python-checks:
    name: Python SDK Checks
    needs: changes
    if: needs.changes.outputs.python == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/python-checks
        with:
          python-version: ${{ matrix.python-version }}

  # Documentation build validation
  docs-checks:
    name: Documentation Checks
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docs-checks

  # Langflow integration checks
  langflow-checks:
    name: Langflow Integration Checks
    needs: changes
    if: needs.changes.outputs.langflow == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/langflow-checks
        with:
          python-version: ${{ matrix.python-version }}

  # License header validation (runs on all changes)
  licensure:
    name: License Headers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install licensure
        uses: taiki-e/install-action@v2
        with:
          tool: licensure
      - name: Check license headers
        shell: bash
        run: ./scripts/check-licenses.sh

  # Integration tests (runs workflow execution tests with external dependencies)
  integration-checks:
    name: Integration Tests
    needs: changes
    if: needs.changes.outputs.rust == 'true' || needs.changes.outputs.python == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Configure Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            stepflow-rs
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.5"
          enable-cache: true
      - name: Set up Python ${{ matrix.python-version }}
        shell: bash
        run: uv python install ${{ matrix.python-version }}
        working-directory: sdks/python
      - name: Run integration tests
        shell: bash
        run: ./scripts/test-integration.sh

  # Final aggregation job - ensures all required checks pass
  # This job is required by branch protection rules
  check-success:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [changes, rust-checks, python-checks, docs-checks, langflow-checks, licensure, integration-checks]
    # Always run this job, but fail if any required checks failed
    if: always()
    steps:
      - name: Check all required jobs succeeded
        run: |
          # Check if any required job failed or was cancelled
          if [[ "${{ needs.rust-checks.result }}" == "failure" || "${{ needs.rust-checks.result }}" == "cancelled" ]]; then
            echo "::error::Rust checks failed"
            exit 1
          fi
          if [[ "${{ needs.python-checks.result }}" == "failure" || "${{ needs.python-checks.result }}" == "cancelled" ]]; then
            echo "::error::Python checks failed"
            exit 1
          fi
          if [[ "${{ needs.docs-checks.result }}" == "failure" || "${{ needs.docs-checks.result }}" == "cancelled" ]]; then
            echo "::error::Documentation checks failed"
            exit 1
          fi
          if [[ "${{ needs.langflow-checks.result }}" == "failure" || "${{ needs.langflow-checks.result }}" == "cancelled" ]]; then
            echo "::error::Langflow integration checks failed"
            exit 1
          fi
          if [[ "${{ needs.licensure.result }}" == "failure" || "${{ needs.licensure.result }}" == "cancelled" ]]; then
            echo "::error::License checks failed"
            exit 1
          fi
          if [[ "${{ needs.integration-checks.result }}" == "failure" || "${{ needs.integration-checks.result }}" == "cancelled" ]]; then
            echo "::error::Integration checks failed"
            exit 1
          fi

          # Check if required jobs were skipped when they should have run
          if [[ "${{ needs.changes.outputs.rust }}" == "true" && "${{ needs.rust-checks.result }}" == "skipped" ]]; then
            echo "::error::Rust changes detected but rust-checks was skipped"
            exit 1
          fi
          if [[ "${{ needs.changes.outputs.python }}" == "true" && "${{ needs.python-checks.result }}" == "skipped" ]]; then
            echo "::error::Python changes detected but python-checks was skipped"
            exit 1
          fi
          if [[ "${{ needs.changes.outputs.docs }}" == "true" && "${{ needs.docs-checks.result }}" == "skipped" ]]; then
            echo "::error::Documentation changes detected but docs-checks was skipped"
            exit 1
          fi
          if [[ "${{ needs.changes.outputs.langflow }}" == "true" && "${{ needs.langflow-checks.result }}" == "skipped" ]]; then
            echo "::error::Langflow changes detected but langflow-checks was skipped"
            exit 1
          fi
          if [[ ("${{ needs.changes.outputs.rust }}" == "true" || "${{ needs.changes.outputs.python }}" == "true") && "${{ needs.integration-checks.result }}" == "skipped" ]]; then
            echo "::error::Rust or Python changes detected but integration-checks was skipped"
            exit 1
          fi

          echo "âœ… All required checks passed!"